// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/flight_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecase/flight_usecase.go -destination=mocks/usecase/flight_usecase_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	dto "bookcabin-voucher/internal/dto"
	model "bookcabin-voucher/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFlightUsecase is a mock of FlightUsecase interface.
type MockFlightUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFlightUsecaseMockRecorder
	isgomock struct{}
}

// MockFlightUsecaseMockRecorder is the mock recorder for MockFlightUsecase.
type MockFlightUsecaseMockRecorder struct {
	mock *MockFlightUsecase
}

// NewMockFlightUsecase creates a new mock instance.
func NewMockFlightUsecase(ctrl *gomock.Controller) *MockFlightUsecase {
	mock := &MockFlightUsecase{ctrl: ctrl}
	mock.recorder = &MockFlightUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightUsecase) EXPECT() *MockFlightUsecaseMockRecorder {
	return m.recorder
}

// CheckFlightExists mocks base method.
func (m *MockFlightUsecase) CheckFlightExists(request dto.CheckFlightRequest) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFlightExists", request)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckFlightExists indicates an expected call of CheckFlightExists.
func (mr *MockFlightUsecaseMockRecorder) CheckFlightExists(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFlightExists", reflect.TypeOf((*MockFlightUsecase)(nil).CheckFlightExists), request)
}

// GenerateAndAssignSeats mocks base method.
func (m *MockFlightUsecase) GenerateAndAssignSeats(request dto.GenerateRequest) (*model.FlightAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateAndAssignSeats", request)
	ret0, _ := ret[0].(*model.FlightAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateAndAssignSeats indicates an expected call of GenerateAndAssignSeats.
func (mr *MockFlightUsecaseMockRecorder) GenerateAndAssignSeats(request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAndAssignSeats", reflect.TypeOf((*MockFlightUsecase)(nil).GenerateAndAssignSeats), request)
}
