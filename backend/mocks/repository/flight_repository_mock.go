// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/flight_repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/flight_repository.go -destination=mocks/repository/flight_repository_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package repository

import (
	model "bookcabin-voucher/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFlightRepository is a mock of FlightRepository interface.
type MockFlightRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFlightRepositoryMockRecorder
	isgomock struct{}
}

// MockFlightRepositoryMockRecorder is the mock recorder for MockFlightRepository.
type MockFlightRepositoryMockRecorder struct {
	mock *MockFlightRepository
}

// NewMockFlightRepository creates a new mock instance.
func NewMockFlightRepository(ctrl *gomock.Controller) *MockFlightRepository {
	mock := &MockFlightRepository{ctrl: ctrl}
	mock.recorder = &MockFlightRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlightRepository) EXPECT() *MockFlightRepositoryMockRecorder {
	return m.recorder
}

// CountByFlightAndDate mocks base method.
func (m *MockFlightRepository) CountByFlightAndDate(flightNumber, date string) int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountByFlightAndDate", flightNumber, date)
	ret0, _ := ret[0].(int64)
	return ret0
}

// CountByFlightAndDate indicates an expected call of CountByFlightAndDate.
func (mr *MockFlightRepositoryMockRecorder) CountByFlightAndDate(flightNumber, date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountByFlightAndDate", reflect.TypeOf((*MockFlightRepository)(nil).CountByFlightAndDate), flightNumber, date)
}

// Create mocks base method.
func (m *MockFlightRepository) Create(assignment *model.FlightAssignment) (*model.FlightAssignment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", assignment)
	ret0, _ := ret[0].(*model.FlightAssignment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFlightRepositoryMockRecorder) Create(assignment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFlightRepository)(nil).Create), assignment)
}
