// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/seat_allocator.go
//
// Generated by this command:
//
//	mockgen -source=internal/service/seat_allocator.go -destination=mocks/service/seat_allocator_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	model "bookcabin-voucher/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSeatAllocator is a mock of SeatAllocator interface.
type MockSeatAllocator struct {
	ctrl     *gomock.Controller
	recorder *MockSeatAllocatorMockRecorder
	isgomock struct{}
}

// MockSeatAllocatorMockRecorder is the mock recorder for MockSeatAllocator.
type MockSeatAllocatorMockRecorder struct {
	mock *MockSeatAllocator
}

// NewMockSeatAllocator creates a new mock instance.
func NewMockSeatAllocator(ctrl *gomock.Controller) *MockSeatAllocator {
	mock := &MockSeatAllocator{ctrl: ctrl}
	mock.recorder = &MockSeatAllocatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeatAllocator) EXPECT() *MockSeatAllocatorMockRecorder {
	return m.recorder
}

// GenerateSeats mocks base method.
func (m *MockSeatAllocator) GenerateSeats(aircraft model.AircraftType, count int, existingSeats []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateSeats", aircraft, count, existingSeats)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateSeats indicates an expected call of GenerateSeats.
func (mr *MockSeatAllocatorMockRecorder) GenerateSeats(aircraft, count, existingSeats any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateSeats", reflect.TypeOf((*MockSeatAllocator)(nil).GenerateSeats), aircraft, count, existingSeats)
}
